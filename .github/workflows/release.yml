name: Build and Release Skills

on:
  release:
    types: [published]

permissions:
  contents: write  # Required to upload release assets

jobs:
  validate-and-build:
    name: Validate and Build Skills
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: Validate skills
        run: |
          python .github/scripts/validate-skills.py

      - name: Build skills
        id: build
        run: |
          # Make scripts executable
          chmod +x .github/scripts/*.sh

          # Build skills and capture JSON output
          SKILLS_JSON=$(.github/scripts/build-skills.sh)

          # Save for later steps (multiline-safe)
          {
            echo 'skills<<EOF'
            echo "$SKILLS_JSON"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          SKILLS_JSON='${{ steps.build.outputs.skills }}'
          CHANGELOG=$(.github/scripts/generate-changelog.sh "${{ github.event.release.tag_name }}" "$SKILLS_JSON")

          # Save changelog (multiline-safe)
          {
            echo 'content<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Upload skill archives to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SKILLS='${{ steps.build.outputs.skills }}'

          # Upload each skill archive
          echo "$SKILLS" | jq -r '.[] | .file' | while read -r archive; do
            echo "Uploading $archive..."
            gh release upload "${{ github.event.release.tag_name }}" \
              "dist/$archive" \
              --clobber
          done

      - name: Update release description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG_CONTENT: ${{ steps.changelog.outputs.content }}
        run: |
          # Get existing release notes
          gh release view "${{ github.event.release.tag_name }}" --json body -q .body > existing_notes.txt

          # Save changelog to file
          printf '%s\n' "$CHANGELOG_CONTENT" > changelog.txt

          # Combine the files
          {
            cat changelog.txt
            echo ""
            echo "---"
            echo ""
            cat existing_notes.txt
          } > combined_notes.txt

          # Update release with combined notes
          gh release edit "${{ github.event.release.tag_name }}" --notes-file combined_notes.txt

          # Cleanup
          rm -f changelog.txt existing_notes.txt combined_notes.txt

      - name: Create job summary
        run: |
          echo "## ðŸŽ‰ Release Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Skills Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          SKILLS='${{ steps.build.outputs.skills }}'
          echo "$SKILLS" | jq -r '.[] | "- **\(.name)** v\(.version) â†’ `\(.file)`"' >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY
